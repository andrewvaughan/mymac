#
# Configures identity and encryption on the system for the current user.
#
# Options:
#   - names
#       - computer - the name of this computer when used on the network, etc
#       - host - the hostname for the computer (without a .local suffix)
#   - ssh_key
#       - bits - how many bits to use for the SSH key (defaults to 4096)
#       - comment - the comment to include with the SSH key (defaults to user@hostname)
#       - password - the SSH key password (default none)
#   - gpg_key
#       - id - the ID of the key
#       - files
#           - private_key - the location of the private key file, as exported by gpg
#           - public_key - the location of the public key file, as exported by gpg
#
---
- name  : Identity
  block :

    # Hostnames
    - block:

        # Primary Hostname (with .local)
        - name         : Checking primary hostname
          become       : true
          shell        : scutil --get HostName
          register     : check_result
          changed_when : false

        - debug:
            var       : check_result
            verbosity : 2


        - name         : Setting primary hostname
          become       : true
          shell        : "scutil --set HostName \"{{ identity.names.host }}\".local"
          register     : set_result
          changed_when : set_result.rc == 0
          when:
            - check_result.stdout != identity.names.host + '.local'

        - debug:
            var       : set_result
            verbosity : 2
          when:
            - set_result is defined


        # Bonjour Hostname (without .local)
        - name         : Checking bonjour hostname
          become       : true
          shell        : scutil --get LocalHostName
          register     : check_result
          changed_when : false

        - debug:
            var       : check_result
            verbosity : 2


        - name         : Setting bonjour hostname
          become       : true
          shell        : "scutil --set LocalHostName \"{{ identity.names.host }}\""
          register     : set_result
          changed_when : set_result.rc == 0
          when:
            - check_result.stdout != identity.names.host

        - debug:
            var       : set_result
            verbosity : 2
          when:
            - set_result is defined

      when:
        - identity.names is defined
        - identity.names.host is defined
        - identity.names.host != ""


    # Computer Name
    - block:

        - name         : Checking computer name
          become       : true
          shell        : scutil --get ComputerName
          register     : check_result
          changed_when : false

        - name         : Setting computer name
          become       : true
          shell        : "scutil --set ComputerName \"{{ identity.names.computer }}\""
          register     : set_result
          changed_when : set_result.rc == 0
          when:
            - check_result.stdout != identity.names.computer

        - debug:
            var       : set_result
            verbosity : 2
          when:
            - set_result is defined

      when:
        - identity.names is defined
        - identity.names.computer is defined
        - identity.names.computer != ""


    # Flush the cache to apply any changes
    - name         : Flushing DNS cache
      become       : true
      shell        : dscacheutil -flushcache
      changed_when : false


    # Generate SSH key
    - name: "Generating SSH key for user {{ ansible_user_id }}"
      user:
        name               : "{{ ansible_user_id }}"
        ssh_key_bits       : "{{ identity.ssh_key.bits|default(4096) }}"
        ssh_key_comment    : "{{ identity.ssh_key.comment|default(omit) }}"
        ssh_key_passphrase : "{{ identity.ssh_key.password|default(omit) }}"
        generate_ssh_key   : yes
      when:
        - identity.ssh_key is defined
        - identity.ssh_key != false

    - block:

        # Install GPG, if missing
        # @TODO


        # Check if the GPG key is installed
        - name         : Checking if GPG public key exists on current machine
          shell        : gpg --list-keys --keyid-format LONG
          register     : check_public
          changed_when : false


        - name         : Checking if GPG private key exists on current machine
          shell        : gpg --list-secret-keys --keyid-format LONG
          register     : check_private
          changed_when : false


        # Install public key if missing
        - block:

            - name: Reserving temporary file
              tempfile:
                state  : file
                prefix : gpg.pub.
                suffix : .asc
              register : temp_pub_key

            - name: Copying and decrypting key to temporary file
              copy:
                src     : "{{ identity.gpg_key.files.public_key }}"
                dest    : "{{ temp_pub_key.path }}"
                mode    : 0600
                decrypt : true

            - name     : Importing public key into GPG
              shell    : "gpg --import \"{{ temp_pub_key.path }}\""

            - name: Deleting decrypted temporary key
              file:
                state : absent
                path  : "{{ temp_pub_key.path }}"

          when:
            - identity.gpg_key.id not in check_public.stdout


        # Install private key if missing
        - block:

            - name: Reserving temporary file
              tempfile:
                state  : file
                prefix : gpg.priv.
                suffix : .asc
              register : temp_priv_key

            - name: Copying and decrypting key to temporary file
              copy:
                src     : "{{ identity.gpg_key.files.private_key }}"
                dest    : "{{ temp_priv_key.path }}"
                mode    : 0600
                decrypt : true

            - name : Importing private key into GPG
              shell : "gpg --import \"{{ temp_priv_key.path }}\""

            - name: Deleting decrypted temporary key
              file:
                state : absent
                path  : "{{ temp_priv_key.path }}"

          when:
            - identity.gpg_key.id not in check_private.stdout

      when:
        - identity.gpg_key is defined
        - identity.gpg_key != false
        - identity.gpg_key.id is defined
        - identity.gpg_key.id != false
        - identity.gpg_key.id != ""
        - identity.gpg_key.files is defined
        - identity.gpg_key.files.public_key is defined
        - identity.gpg_key.files.public_key != false
        - identity.gpg_key.files.public_key != ""
        - identity.gpg_key.files.private_key is defined
        - identity.gpg_key.files.private_key != false
        - identity.gpg_key.files.private_key != ""


    # Mark this script complete in case others need to reference it
    - name: Done
      set_fact:
        mymac : "{{ mymac|default([]) + [{ 'identity': true }] }}"


  when:
    - identity is defined
    - identity != false
    - identity != []
