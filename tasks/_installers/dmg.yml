# Installs a DMG file from a URL or file.
#
# Variables:
#   - url      : downloads a DMG file from a URL and installs it
#   - checksum : an optional checksum to test against the downloaded file
#   - file     : installs a DMG file from a file
#   - pkg      : the Package to run when mounted; if set to false (default) will simply copy any .app files to computer
#   - bin_test : a shell command to check; the DMG will only be installed if this throws a non-zero exit code
#   - app_test : an application file (.app) to check; the DMG will only be installed if this does not exist
#
# If a URL is provided, it will overwrite any file that is set.
#
# @see http://docs.ansible.com/ansible/latest/get_url_module.html
---

- name  : DMG
  block :

    - name          : Checking if binary exists
      shell         : "{{ bin_test }}"
      register      : bin_check
      changed_when  : false
      ignore_errors : yes
      when :
        - bin_test is defined
        - bin_test != false
        - bin_test != ""

    - name         : Checking if applciation exists
      stat :
        path       : "/Applications/{{ app_test }}"
      register     : app_check
      changed_when : false
      when :
        - app_test is defined
        - app_test != false
        - app_test != ""


    - block :

        # Download a DMG file to a temporary location if provided, set this as `file`
        - block :

            - name     : Reserving a temporary location to download to
              tempfile :
                state  : file
                suffix : .dmg
              register : temp_dmg

            - name     : Reserving a temporary location to mount to
              tempfile :
                state  : directory
              register : temp_mount

            - name       : Downloading the DMG file to the temorary location
              get_url :
                url      : "{{ url }}"
                dest     : "{{ temp_dmg.path }}"
                checksum : "{{ checksum|default(omit) }}"
                mode     : 0700

            - name   : Storing the file name as the new DMG file
              set_fact :
                file : "{{ temp_dmg.path }}"

          when :
            - url is defined
            - url != false
            - url != ""


        # Install the DMG file
        - name   : Mounting DMG file
          become : true
          shell  : "hdiutil attach \"{{ file }}\" -nobrowse -mountpoint \"{{ temp_mount.path }}\""


        # Run pkg installer, if pkg is defined
        - block :

            - name     : Get our OSX volume name
              shell    : "VolumeOfFile /System"
              register : master_volume

            - name   : Running package installer...
              become : true
              shell  : "installer -pkg \"{{ temp_mount.path }}/{{ pkg }}\" -target \"/Volumes/{{ master_volume.stdout }}\""

          when :
            - pkg is defined
            - pkg != False


        # Copy applicaton files, if no pkg is contained
        - block :

            - name   : Copying Application to Computer
              become : true
              shell  : "cp -aR \"{{ temp_mount.path }}/*.app\" /Applications/"

          when :
            - pkg is not defined or pkg == False


        # Cleanup
        - name   : Unmounting DMG file
          become : true
          shell  : "hdiutil detach \"{{ temp_mount.path }}\""

        - name    : Removing mounted files
          become  : true
          file :
            state : absent
            path  : "{{ temp_mount.path }}"

        - name    : Removing downloaded files
          become  : true
          file :
            state : absent
            path  : "{{ file }}"
          when    : temp_dmg is defined


      when :
        - bin_check is not defined or bin_check.rc is not defined or bin_check.rc != 0
        - app_check is not defined or app_check.stat is not defined or app_check.stat.exists == False
