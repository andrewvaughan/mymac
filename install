#!/bin/bash
#
# To run this script from a terminal, enter the following:
#
#   /bin/bash <(curl -fsSL https://raw.githubusercontent.com/andrewvaughan/mymac/master/install)
#
# Arguments can be added to the script by placing them at the end; to see all options, use the `-h` argument:
#
#   /bin/bash <(curl -fsSL https://raw.githubusercontent.com/andrewvaughan/mymac/master/install) -h


# Ensure we're not running as root
if [[ $EUID -eq 0 ]]; then
   echo "This script cannot be run as root.  Please try again." 1>&2
   exit 1
fi

# Load our options
usage() {
  echo "Usage: install [-d] [-v]"
  echo "    -m  Use the master branch instead of latest release" 1>&2
  echo "    -e  Use an encypted profile and ask for a vault password" 1>&2
  echo "    -l  Launches a local version of MyMac instead of downloading it" 1>&2
  echo "    -d  Enables debugging" 1>&2
  echo "    -v  Enables verbose debugging (implies -d)" 1>&2
  echo "    -h  Printes this usage information and exits" 1>&2
}

# Cleans up any temporary files used during installation
cleanup() {
  echo "Cleaning up..."

  cd ~

  if [ -n "$MYMAC_TEMPDIR" ]; then
    rm -rf ${MYMAC_TEMPDIR}
    unset MYMAC_TEMPDIR
  fi

  unset ANSIBLE_STRATEGY
  unset ANSIBLE_PARAM
  unset ANSIBLE_DEBUG_PARAM
  unset DEBUG_PARAM
  unset GITHUB_BRANCH
}

# Argument Defaults
ANSIBLE_STRATEGY=""
ANSIBLE_PARAM="--ask-become-pass"
ANSIBLE_DEBUG_PARAM=""
DEBUG_PARAM=""
GITHUB_BRANCH="latest"

# Parse any arguments sent
while getopts ":meldvh" opt; do
  case $opt in
    m)
      GITHUB_BRANCH=master
      ;;

    e)
      ANSIBLE_PARAM="${ANSIBLE_PARAM} --ask-vault-pass"
      ;;

    l)
      NO_DOWNLOAD=1
      ;;

    d)
      ANSIBLE_STRATEGY=debug
      ANSIBLE_DEBUG_PARAM="-v"
      DEBUG_PARAM="-v"
      ;;

    v)
      ANSIBLE_STRATEGY=debug
      ANSIBLE_DEBUG_PARAM="-vvv"
      DEBUG_PARAM="-v"
      ;;

    h)
      usage
      exit
      ;;

    \?)
      echo "Invalid option: -${OPTARG}" >&2
      usage
      exit 2
      ;;
  esac
done


echo
echo "NOTE: You may be asked to enter your computer user's sudo password multiple"
echo "      times during installation. Computer configuration may take a significant"
echo "      amount of time."
echo


# Do we have access to ansible-playbook?
command -v ansible-playbook >/dev/null 2>&1 || {
  sudo -v

  echo "Ansible not found... attempting install"

  # Is pip installed?
  command -v pip >/dev/null 2>&1 || {
    echo "Dependency pip not found... attempting install"

    # Is easy_install available?
    command -v easy_install >/dev/null 2>&1 || {
      echo "Python easy_install is not availabe on this system.  Please ensure Python 2.7 is installed and try again." >&2
      exit 3
    }

    echo "Installing dependency pip..."
    sudo easy_install ${DEBUG_PARAM} pip
  }

  echo "Installing Ansible..."
  sudo pip install ${DEBUG_PARAM} ansible
}


# Ensure Ansible is loaded and available
command -v ansible-playbook >/dev/null 2>&1 || {
  echo "Ansible did not install correctly. Exiting." >&2
  exit 4
}


if [ -z "${NO_DOWNLOAD}" ]; then

  # Create a temporary directory to work in
  MYMAC_TEMPDIR=$(mktemp -d)
  cd ${MYMAC_TEMPDIR}


  # Download the latest branch from Github
  echo
  echo "Downloading MyMac configuration agent..."
  echo

  curl -LOk https://github.com/andrewvaughan/mymac/archive/${GITHUB_BRANCH}.tar.gz

  if [ ! -f ${GITHUB_BRANCH}.tar.gz ]; then
      cleanup
      echo "Could not download required files from \"https://github.com/andrewvaughan/mymac/archive/${GITHUB_BRANCH}.tar.gz\". Exiting." >&2
      exit 5
  fi

  tar ${DEBUG_PARAM}xfz ${GITHUB_BRANCH}.tar.gz

  if [ ! -d mymac-${GITHUB_BRANCH} ]; then
      cleanup
      echo "Failed to extract required files from \"https://github.com/andrewvaughan/mymac/archive/${GITHUB_BRANCH}.tar.gz\". Exiting." >&2
      exit 6
  fi

  # Run the Ansible playbook downloaded
  echo
  echo "Running MyMac configuration..."
  echo

  cd mymac-${GITHUB_BRANCH}

fi

# Install ansible-galaxy dependencies
echo "Installing dependencies..."
echo
ansible-galaxy install -r ${ANSIBLE_DEBUG_PARAM} requirements.yml
echo

# Run ansible with our provided debug mode
ansible-playbook ${ANSIBLE_PARAM} ${ANSIBLE_DEBUG_PARAM} playbook.yml
echo

# Cleanup and exit
cleanup

echo
echo "Finished successfully!"
echo
